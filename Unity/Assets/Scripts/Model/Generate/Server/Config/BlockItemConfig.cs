
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;

namespace ET
{
    [EnableClass]
    public sealed partial class BlockItemConfig : BeanBase
    {
        public BlockItemConfig(ByteBuf _buf)
        {
            ID = _buf.ReadInt();
            PrefabPath = _buf.ReadString();
            Size = ET.ConfigTypeConvertor.ToInt2(_int2.Deserialize_int2(_buf));
            {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);CellIndexes = new System.Collections.Generic.List<Unity.Mathematics.int2>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { Unity.Mathematics.int2 _e0;  _e0 = ET.ConfigTypeConvertor.ToInt2(_int2.Deserialize_int2(_buf)); CellIndexes.Add(_e0);}}
            {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);CellIds = new System.Collections.Generic.List<int>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { int _e0;  _e0 = _buf.ReadInt(); CellIds.Add(_e0);}}
            BlockType = _buf.ReadInt();

            PostInit();
        }

        public static BlockItemConfig DeserializeBlockItemConfig(ByteBuf _buf)
        {
            return new BlockItemConfig(_buf);
        }

        public readonly int ID;

        public readonly string PrefabPath;

        public readonly Unity.Mathematics.int2 Size;

        public readonly System.Collections.Generic.List<Unity.Mathematics.int2> CellIndexes;

        public readonly System.Collections.Generic.List<int> CellIds;

        public readonly int BlockType;


        public const int __ID__ = -424551294;
        public override int GetTypeId() => __ID__;

        public  void ResolveRef()
        {
            
            
            
            
            
            
        }

        public override string ToString()
        {
            return "{ "
            + "ID:" + ID + ","
            + "PrefabPath:" + PrefabPath + ","
            + "Size:" + Size + ","
            + "CellIndexes:" + Luban.StringUtil.CollectionToString(CellIndexes) + ","
            + "CellIds:" + Luban.StringUtil.CollectionToString(CellIds) + ","
            + "BlockType:" + BlockType + ","
            + "}";
        }

        partial void PostInit();
    }
}
